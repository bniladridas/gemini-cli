version: '2.1'

setup: true # Auto-cancel redundant builds

executors:
  node_executor:
    docker:
      - image: 'cimg/node:22.12'
    working_directory: '~/project'

commands:
  install_deps:
    description: 'Install and cache npm dependencies'
    steps:
      - restore_cache:
          keys:
            - 'v1-dependencies-{{ checksum "package-lock.json" }}'
      - run:
          name: 'Install dependencies'
          command: 'npm ci'
      - save_cache:
          key: 'v1-dependencies-{{ checksum "package-lock.json" }}'
          paths:
            - 'node_modules'

  install_system_deps:
    description: 'Install Python venv'
    steps:
      - run:
          name: 'Install python3-venv'
          command: |
            sudo apt-get update -y
            sudo apt-get install -y python3-venv

  setup_gcloud:
    description: 'Set up Google Cloud SDK (no billing required)'
    steps:
      - run:
          name: 'Install Google Cloud SDK'
          command: |
            echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] \
              https://packages.cloud.google.com/apt cloud-sdk main" | \
              sudo tee /etc/apt/sources.list.d/google-cloud-sdk.list

            curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | \
              sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -

            sudo apt-get update -y
            sudo apt-get install -y google-cloud-sdk

      - run:
          name: 'Verify SDK installation (no billing calls)'
          command: |
            echo '=== Google Cloud SDK Version ==='
            gcloud --version

            echo '\n=== Environment Variables (sanitized) ==='
            env | sort | grep -i 'google\|gcp\|gcloud\|gemini' || true

jobs:
  preflight:
    executor: 'node_executor'
    steps:
      - 'checkout'
      - 'install_deps'
      - 'install_system_deps'
      - run:
          name: 'Run preflight checks'
          command: 'npm run preflight'
          when: 'always'

  e2e:
    executor: 'node_executor'
    environment:
      KEEP_OUTPUT: 'true'
      GEMINI_NON_INTERACTIVE: 'true'
      CI: 'true'
      FORCE_COLOR: '0'
    resource_class: 'medium+'
    steps:
      - 'checkout'
      - 'install_deps'
      - run:
          name: 'Build packages'
          command: 'npm run build'
      - run:
          name: 'Rebuild bundle after packages are built'
          command: 'npm run bundle'
      - run:
          name: 'Setup test environment'
          command: |
            # Create test config directory
            mkdir -p ~/.config/@google/gemini-cli

            # Create config file with test settings using echo
            echo '{"apiKey": "'"${GEMINI_API_KEY}"'", "autoApprove": true}' > ~/.config/@google/gemini-cli/config.json

            # Verify config file was created
            echo "Config file created at ~/.config/@google/gemini-cli/config.json"
            cat ~/.config/@google/gemini-cli/config.json
      - 'setup_gcloud'
      - run:
          name: 'Run E2E tests'
          command: |
            # Run only tests that don't make API calls to avoid quota issues
            # clipboard tests (skipped on Linux), ctrl-c-exit (no API), flicker (no API)
            # All other tests make API calls and will fail due to free tier quota (250 req/min)
            GEMINI_API_KEY="${GEMINI_API_KEY}" npm run test:integration:sandbox:none -- \
              --pool=forks \
              --poolOptions.forks.singleFork \
              --retry=0 \
              clipboardUtils.e2e.test.ts \
              ctrl-c-exit.test.ts \
              flicker.test.ts
          no_output_timeout: 600 # 10 minutes in seconds
          when: 'always'

workflows:
  version: '2.1'
  build_and_test:
    jobs:
      - 'preflight'
      - 'e2e':
          requires:
            - 'preflight'
          # Always run e2e after preflight, even if preflight fails
          # (useful for test result collection)
          context: 'ci'
    when:
      or:
        - equal: ['main', '<< pipeline.git.branch >>']
        - matches:
            pattern: '^(feat|fix|chore|release|circleci)(/|-).*'
            value: '<< pipeline.git.branch >>'
